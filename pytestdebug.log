versions pytest-5.3.5, py-1.8.1, python-3.7.6.final.0
cwd=D:\code_ws\pb_ws\conmech
args=('-s', '--engine', 'numpy', '-m', 'equil_check', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x0000023687DDEB08>
    pytest_plugin_registered [hook]
        plugin: <Session conmech exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x0000023687DDEB08>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002368824A2C8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000002368824A808>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x000002368824A208>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x0000023687DDEB08>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest_cov\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_forked' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest_forked\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.plugin' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\xdist\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.looponfail' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\xdist\\looponfail.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from 'D:\\code_ws\\pb_ws\\conmech\\tests\\conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002368824A2C8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000002368824A808>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x000002368824A208>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x0000023688279288>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x0000023688294648>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x0000023687DDEB08>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest_cov\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_forked' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest_forked\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.plugin' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\xdist\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.looponfail' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\xdist\\looponfail.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from 'D:\\code_ws\\pb_ws\\conmech\\tests\\conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002368824A2C8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000002368824A808>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x000002368824A208>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x0000023688279288>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x0000023688294648>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000002368829A188>
          manager: <_pytest.config.PytestPluginManager object at 0x00000236870C1CC8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x0000023687DDEB08>
          startdir: D:\code_ws\pb_ws\conmech
      finish pytest_report_header --> [['rootdir: D:\\code_ws\\pb_ws\\conmech, inifile: pytest.ini, testpaths: tests/python', 'plugins: cov-2.8.1, forked-1.2.0, xdist-1.32.0'], ['using: pytest-5.3.5 pylib-1.8.1', 'setuptools registered plugins:', '  pytest-cov-2.8.1 at d:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest_cov\\plugin.py', '  pytest-forked-1.2.0 at d:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest_forked\\__init__.py', '  pytest-xdist-1.32.0 at d:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\xdist\\plugin.py', '  pytest-xdist-1.32.0 at d:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\xdist\\looponfail.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests/python'] [collection]
        pytest_collectstart [hook]
            collector: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument [local('D:\\code_ws\\pb_ws\\conmech\\tests\\python')] [collection]
            pytest_ignore_collect [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_compare_element_subdivision.py
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_compare_element_subdivision.py
                parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\code_ws\pb_ws\conmech\tests\python\test_compare_element_subdivision.py
                  parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/python/test_compare_element_subdivision.py> [hook]
            finish pytest_collect_file --> [<Module tests/python/test_compare_element_subdivision.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_np_stiffness.py
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_np_stiffness.py
                parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\code_ws\pb_ws\conmech\tests\python\test_np_stiffness.py
                  parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/python/test_np_stiffness.py> [hook]
            finish pytest_collect_file --> [<Module tests/python/test_np_stiffness.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_parsing.py
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_parsing.py
                parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\code_ws\pb_ws\conmech\tests\python\test_parsing.py
                  parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/python/test_parsing.py> [hook]
            finish pytest_collect_file --> [<Module tests/python/test_parsing.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_stiffness_checker.py
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\test_stiffness_checker.py
                parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\code_ws\pb_ws\conmech\tests\python\test_stiffness_checker.py
                  parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/python/test_stiffness_checker.py> [hook]
            finish pytest_collect_file --> [<Module tests/python/test_stiffness_checker.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\tmp_bad_material_properties_model.json
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\tmp_bad_material_properties_model.json
                parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            early skip of rewriting module: py._code [assertion]
            early skip of rewriting module: py._code.code [assertion]
            early skip of rewriting module: repr [assertion]
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\tmp_tower_3D_broken_lines.json
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\code_ws\pb_ws\conmech\tests\python\tmp_tower_3D_broken_lines.json
                parent: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=4 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=4 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module tests/python/test_compare_element_subdivision.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/python/test_compare_element_subdivision.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/python/test_compare_element_subdivision.py>
      find_module called for: test_compare_element_subdivision [assertion]
      matched test file 'D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_compare_element_subdivision.py' [assertion]
      found cached rewritten pyc for D:\code_ws\pb_ws\conmech\tests\python\test_compare_element_subdivision.py [assertion]
      early skip of rewriting module: pyconmech [assertion]
      early skip of rewriting module: pyconmech.frame_analysis [assertion]
      early skip of rewriting module: pyconmech.frame_analysis.stiffness_checker [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: numpy.core [assertion]
      early skip of rewriting module: numpy.core.multiarray [assertion]
      early skip of rewriting module: numpy.core.overrides [assertion]
      early skip of rewriting module: numpy.core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.compat [assertion]
      early skip of rewriting module: numpy.compat._inspect [assertion]
      early skip of rewriting module: numpy.compat.py3k [assertion]
      early skip of rewriting module: pickle5 [assertion]
      early skip of rewriting module: numpy.core.umath [assertion]
      early skip of rewriting module: numpy.core.numerictypes [assertion]
      early skip of rewriting module: numpy.core._string_helpers [assertion]
      early skip of rewriting module: numpy.core._type_aliases [assertion]
      early skip of rewriting module: numpy.core._dtype [assertion]
      early skip of rewriting module: numpy.core.numeric [assertion]
      early skip of rewriting module: numpy.core.shape_base [assertion]
      early skip of rewriting module: numpy.core._asarray [assertion]
      early skip of rewriting module: numpy.core.fromnumeric [assertion]
      early skip of rewriting module: numpy.core._methods [assertion]
      early skip of rewriting module: numpy.core._exceptions [assertion]
      early skip of rewriting module: numpy.core._ufunc_config [assertion]
      early skip of rewriting module: numpy.core.arrayprint [assertion]
      early skip of rewriting module: numpy.core.defchararray [assertion]
      early skip of rewriting module: numpy.core.records [assertion]
      early skip of rewriting module: numpy.core.memmap [assertion]
      early skip of rewriting module: numpy.core.function_base [assertion]
      early skip of rewriting module: numpy.core.machar [assertion]
      early skip of rewriting module: numpy.core.getlimits [assertion]
      early skip of rewriting module: numpy.core.einsumfunc [assertion]
      early skip of rewriting module: numpy.core._add_newdocs [assertion]
      early skip of rewriting module: numpy.core._multiarray_tests [assertion]
      early skip of rewriting module: numpy.core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy.core._internal [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib.type_check [assertion]
      early skip of rewriting module: numpy.lib.ufunclike [assertion]
      early skip of rewriting module: numpy.lib.index_tricks [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.lib.twodim_base [assertion]
      early skip of rewriting module: numpy.linalg.lapack_lite [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy.lib.function_base [assertion]
      early skip of rewriting module: numpy.lib.histograms [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib.nanfunctions [assertion]
      early skip of rewriting module: numpy.lib.shape_base [assertion]
      early skip of rewriting module: numpy.lib.polynomial [assertion]
      early skip of rewriting module: numpy.lib.utils [assertion]
      early skip of rewriting module: numpy.lib.arraysetops [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib.financial [assertion]
      early skip of rewriting module: numpy.lib.arrayterator [assertion]
      early skip of rewriting module: numpy.lib.arraypad [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy.fft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft_internal [assertion]
      early skip of rewriting module: numpy.fft.helper [assertion]
      early skip of rewriting module: numpy.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polyutils [assertion]
      early skip of rewriting module: numpy.polynomial._polybase [assertion]
      early skip of rewriting module: numpy.polynomial.chebyshev [assertion]
      early skip of rewriting module: numpy.polynomial.legendre [assertion]
      early skip of rewriting module: numpy.polynomial.hermite [assertion]
      early skip of rewriting module: numpy.polynomial.hermite_e [assertion]
      early skip of rewriting module: numpy.polynomial.laguerre [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: numpy.random._bit_generator [assertion]
      early skip of rewriting module: numpy.random._common [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: numpy.random._bounded_integers [assertion]
      early skip of rewriting module: numpy.random._mt19937 [assertion]
      early skip of rewriting module: numpy.random._philox [assertion]
      early skip of rewriting module: numpy.random._pcg64 [assertion]
      early skip of rewriting module: numpy.random._sfc64 [assertion]
      early skip of rewriting module: numpy.random._generator [assertion]
      early skip of rewriting module: numpy.ctypeslib [assertion]
      early skip of rewriting module: numpy.ma [assertion]
      early skip of rewriting module: numpy.ma.core [assertion]
      early skip of rewriting module: numpy.ma.extras [assertion]
      early skip of rewriting module: _pystiffness_checker [assertion]
      early skip of rewriting module: pyconmech.frame_analysis.numpy_stiffness [assertion]
      early skip of rewriting module: scipy [assertion]
      early skip of rewriting module: scipy._lib [assertion]
      early skip of rewriting module: scipy._lib._testutils [assertion]
      early skip of rewriting module: scipy._lib.deprecation [assertion]
      early skip of rewriting module: scipy._distributor_init [assertion]
      early skip of rewriting module: scipy.__config__ [assertion]
      early skip of rewriting module: scipy.version [assertion]
      early skip of rewriting module: scipy._lib._version [assertion]
      early skip of rewriting module: scipy._lib.six [assertion]
      early skip of rewriting module: scipy._lib._ccallback [assertion]
      early skip of rewriting module: scipy._lib._ccallback_c [assertion]
      early skip of rewriting module: scipy.fft [assertion]
      early skip of rewriting module: scipy.fft._basic [assertion]
      early skip of rewriting module: scipy._lib.uarray [assertion]
      early skip of rewriting module: uarray [assertion]
      early skip of rewriting module: scipy._lib._uarray [assertion]
      early skip of rewriting module: scipy._lib._uarray._backend [assertion]
      early skip of rewriting module: scipy._lib._uarray._uarray [assertion]
      early skip of rewriting module: scipy.fft._realtransforms [assertion]
      early skip of rewriting module: scipy.fft._helper [assertion]
      early skip of rewriting module: scipy.fft._pocketfft [assertion]
      early skip of rewriting module: scipy.fft._pocketfft.basic [assertion]
      early skip of rewriting module: scipy.fft._pocketfft.pypocketfft [assertion]
      early skip of rewriting module: scipy.fft._pocketfft.helper [assertion]
      early skip of rewriting module: scipy.fft._pocketfft.realtransforms [assertion]
      early skip of rewriting module: scipy.fft._backend [assertion]
      early skip of rewriting module: numpy.dual [assertion]
      early skip of rewriting module: scipy.sparse [assertion]
      early skip of rewriting module: scipy.sparse.base [assertion]
      early skip of rewriting module: scipy._lib._numpy_compat [assertion]
      early skip of rewriting module: numpy.testing [assertion]
      early skip of rewriting module: unittest [assertion]
      early skip of rewriting module: unittest.result [assertion]
      early skip of rewriting module: unittest.util [assertion]
      early skip of rewriting module: unittest.case [assertion]
      early skip of rewriting module: difflib [assertion]
      early skip of rewriting module: unittest.suite [assertion]
      early skip of rewriting module: unittest.loader [assertion]
      early skip of rewriting module: unittest.main [assertion]
      early skip of rewriting module: unittest.runner [assertion]
      early skip of rewriting module: unittest.signals [assertion]
      early skip of rewriting module: numpy.testing._private [assertion]
      early skip of rewriting module: numpy.testing._private.utils [assertion]
      early skip of rewriting module: gc [assertion]
      early skip of rewriting module: numpy.testing._private.decorators [assertion]
      early skip of rewriting module: numpy.testing._private.nosetester [assertion]
      early skip of rewriting module: scipy.sparse.sputils [assertion]
      early skip of rewriting module: scipy.sparse.csr [assertion]
      early skip of rewriting module: scipy.sparse._sparsetools [assertion]
      early skip of rewriting module: scipy.sparse.compressed [assertion]
      early skip of rewriting module: scipy._lib._util [assertion]
      early skip of rewriting module: scipy.sparse.data [assertion]
      early skip of rewriting module: scipy.sparse.dia [assertion]
      early skip of rewriting module: scipy.sparse._index [assertion]
      early skip of rewriting module: scipy.sparse.csc [assertion]
      early skip of rewriting module: scipy.sparse.lil [assertion]
      early skip of rewriting module: scipy.sparse._csparsetools [assertion]
      early skip of rewriting module: scipy.sparse.dok [assertion]
      early skip of rewriting module: scipy.sparse.coo [assertion]
      early skip of rewriting module: scipy.sparse.bsr [assertion]
      early skip of rewriting module: scipy.sparse.construct [assertion]
      early skip of rewriting module: scipy.sparse.extract [assertion]
      early skip of rewriting module: scipy.sparse._matrix_io [assertion]
      early skip of rewriting module: scipy.sparse.csgraph [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._laplacian [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._shortest_path [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._validation [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._tools [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._traversal [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._min_spanning_tree [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._flow [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._matching [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._reordering [assertion]
      early skip of rewriting module: scipy.sparse.linalg [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.iterative [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve._iterative [assertion]
      early skip of rewriting module: scipy.sparse.linalg.interface [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.utils [assertion]
      early skip of rewriting module: scipy._lib._threadsafety [assertion]
      early skip of rewriting module: scipy._lib.decorator [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.minres [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.lgmres [assertion]
      early skip of rewriting module: scipy.linalg [assertion]
      early skip of rewriting module: scipy.linalg.linalg_version [assertion]
      early skip of rewriting module: scipy.linalg.misc [assertion]
      early skip of rewriting module: scipy.linalg.blas [assertion]
      early skip of rewriting module: scipy.linalg._fblas [assertion]
      early skip of rewriting module: scipy.linalg._cblas [assertion]
      early skip of rewriting module: scipy.linalg.lapack [assertion]
      early skip of rewriting module: scipy.linalg._flapack [assertion]
      early skip of rewriting module: scipy.linalg._clapack [assertion]
      early skip of rewriting module: scipy.linalg.basic [assertion]
      early skip of rewriting module: scipy.linalg.flinalg [assertion]
      early skip of rewriting module: scipy.linalg._flinalg [assertion]
      early skip of rewriting module: scipy.linalg.decomp [assertion]
      early skip of rewriting module: scipy.linalg.decomp_svd [assertion]
      early skip of rewriting module: scipy.linalg._solve_toeplitz [assertion]
      early skip of rewriting module: scipy.linalg.decomp_lu [assertion]
      early skip of rewriting module: scipy.linalg._decomp_ldl [assertion]
      early skip of rewriting module: scipy.linalg.decomp_cholesky [assertion]
      early skip of rewriting module: scipy.linalg.decomp_qr [assertion]
      early skip of rewriting module: scipy.linalg._decomp_qz [assertion]
      early skip of rewriting module: scipy.linalg.decomp_schur [assertion]
      early skip of rewriting module: scipy.linalg._decomp_polar [assertion]
      early skip of rewriting module: scipy.linalg.matfuncs [assertion]
      early skip of rewriting module: scipy.linalg.special_matrices [assertion]
      early skip of rewriting module: scipy.linalg._expm_frechet [assertion]
      early skip of rewriting module: scipy.linalg._matfuncs_sqrtm [assertion]
      early skip of rewriting module: scipy.linalg._solvers [assertion]
      early skip of rewriting module: scipy.linalg._procrustes [assertion]
      early skip of rewriting module: scipy.linalg._decomp_update [assertion]
      early skip of rewriting module: scipy.linalg.cython_blas [assertion]
      early skip of rewriting module: scipy.linalg.cython_lapack [assertion]
      early skip of rewriting module: scipy.linalg._sketches [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve._gcrotmk [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.lsqr [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.lsmr [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve.linsolve [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve._superlu [assertion]
      early skip of rewriting module: scikits [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve._add_newdocs [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.arpack [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.arpack.arpack [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.arpack._arpack [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.lobpcg [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.lobpcg.lobpcg [assertion]
      early skip of rewriting module: scipy.sparse.linalg.matfuncs [assertion]
      early skip of rewriting module: scipy.special [assertion]
      early skip of rewriting module: scipy.special.sf_error [assertion]
      early skip of rewriting module: scipy.special._ufuncs [assertion]
      early skip of rewriting module: scipy.special._ufuncs_cxx [assertion]
      early skip of rewriting module: scipy.special._basic [assertion]
      early skip of rewriting module: scipy.special.specfun [assertion]
      early skip of rewriting module: scipy.special.orthogonal [assertion]
      early skip of rewriting module: scipy.special._comb [assertion]
      early skip of rewriting module: scipy.special._logsumexp [assertion]
      early skip of rewriting module: scipy.special.spfun_stats [assertion]
      early skip of rewriting module: scipy.special._ellip_harm [assertion]
      early skip of rewriting module: scipy.special._ellip_harm_2 [assertion]
      early skip of rewriting module: scipy.special.lambertw [assertion]
      early skip of rewriting module: scipy.special._spherical_bessel [assertion]
      early skip of rewriting module: scipy.sparse.linalg._expm_multiply [assertion]
      early skip of rewriting module: scipy.sparse.linalg._onenormest [assertion]
      early skip of rewriting module: scipy.sparse.linalg._norm [assertion]
      early skip of rewriting module: pyconmech.frame_analysis.stiffness_base [assertion]
      early skip of rewriting module: pyconmech.frame_analysis.frame_file_io [assertion]
      early skip of rewriting module: pyconmech.frame_analysis.io_base [assertion]
      early skip of rewriting module: termcolor [assertion]
      early skip of rewriting module: pyconmech.__version__ [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __name__
            obj: test_compare_element_subdivision
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __spec__
            obj: ModuleSpec(name='test_compare_element_subdivision', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>, origin='D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_compare_element_subdivision.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __file__
            obj: D:\code_ws\pb_ws\conmech\tests\python\test_compare_element_subdivision.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __cached__
            obj: D:\code_ws\pb_ws\conmech\tests\python\__pycache__\test_compare_element_subdivision.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Copyright (c) 2019 Yijiang Huang, All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
, 'help': Type help() for interactive help, or help(object) for help about object., '__pybind11_internals_v3__': <capsule object NULL at 0x00000236882CA690>, '__pybind11_internals_v3_msvc__': <capsule object NULL at 0x000002368895ADB0>}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: pytest
            obj: <module 'pytest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: os
            obj: <module 'os' from 'd:\\miniconda\\envs\\pb_ws\\lib\\os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: glob
            obj: <module 'glob' from 'd:\\miniconda\\envs\\pb_ws\\lib\\glob.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: StiffnessChecker
            obj: <class 'pyconmech.frame_analysis.stiffness_checker.StiffnessChecker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: test_subdivided_compliance
            obj: <function test_subdivided_compliance at 0x000002368962C948>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000236896806C8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_subdivided_compliance>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FF8F6468F20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_compare_element_subdivision.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/python/test_compare_element_subdivision.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_subdivided_compliance> [collection]
      pytest_itemcollected [hook]
          item: <Function test_subdivided_compliance>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/python/test_compare_element_subdivision.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/python/test_np_stiffness.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/python/test_np_stiffness.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/python/test_np_stiffness.py>
      find_module called for: test_np_stiffness [assertion]
      matched test file 'D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_np_stiffness.py' [assertion]
      found cached rewritten pyc for D:\code_ws\pb_ws\conmech\tests\python\test_np_stiffness.py [assertion]
      early skip of rewriting module: matplotlib [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: distutils [assertion]
      early skip of rewriting module: distutils.version [assertion]
      early skip of rewriting module: matplotlib.cbook [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: matplotlib.cbook.deprecation [assertion]
      early skip of rewriting module: matplotlib.cbook._backports [assertion]
      early skip of rewriting module: matplotlib.compat [assertion]
      early skip of rewriting module: matplotlib.compat.subprocess [assertion]
      early skip of rewriting module: matplotlib.rcsetup [assertion]
      early skip of rewriting module: matplotlib.testing [assertion]
      early skip of rewriting module: matplotlib.fontconfig_pattern [assertion]
      early skip of rewriting module: pyparsing [assertion]
      early skip of rewriting module: matplotlib.colors [assertion]
      early skip of rewriting module: matplotlib._color_data [assertion]
      early skip of rewriting module: cycler [assertion]
      early skip of rewriting module: six.moves.urllib [assertion]
      early skip of rewriting module: six.moves.urllib.request [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: nturl2path [assertion]
      early skip of rewriting module: matplotlib._version [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: matplotlib.pyplot [assertion]
      early skip of rewriting module: matplotlib.colorbar [assertion]
      early skip of rewriting module: matplotlib.artist [assertion]
      early skip of rewriting module: matplotlib.docstring [assertion]
      early skip of rewriting module: matplotlib.path [assertion]
      early skip of rewriting module: matplotlib._path [assertion]
      early skip of rewriting module: matplotlib.transforms [assertion]
      early skip of rewriting module: matplotlib.collections [assertion]
      early skip of rewriting module: matplotlib.cm [assertion]
      early skip of rewriting module: matplotlib._cm [assertion]
      early skip of rewriting module: matplotlib._cm_listed [assertion]
      early skip of rewriting module: matplotlib.lines [assertion]
      early skip of rewriting module: matplotlib.markers [assertion]
      early skip of rewriting module: matplotlib.contour [assertion]
      early skip of rewriting module: matplotlib._contour [assertion]
      early skip of rewriting module: matplotlib.ticker [assertion]
      early skip of rewriting module: matplotlib.font_manager [assertion]
      early skip of rewriting module: matplotlib.afm [assertion]
      early skip of rewriting module: matplotlib._mathtext_data [assertion]
      early skip of rewriting module: matplotlib.ft2font [assertion]
      early skip of rewriting module: matplotlib.text [assertion]
      early skip of rewriting module: matplotlib.patches [assertion]
      early skip of rewriting module: matplotlib.bezier [assertion]
      early skip of rewriting module: matplotlib.textpath [assertion]
      early skip of rewriting module: matplotlib.mathtext [assertion]
      early skip of rewriting module: matplotlib._png [assertion]
      early skip of rewriting module: matplotlib.dviread [assertion]
      early skip of rewriting module: six.moves.urllib.parse [assertion]
      early skip of rewriting module: matplotlib.texmanager [assertion]
      early skip of rewriting module: matplotlib.blocking_input [assertion]
      early skip of rewriting module: matplotlib.gridspec [assertion]
      early skip of rewriting module: matplotlib._pylab_helpers [assertion]
      early skip of rewriting module: matplotlib.tight_layout [assertion]
      early skip of rewriting module: matplotlib._layoutbox [assertion]
      early skip of rewriting module: kiwisolver [assertion]
      early skip of rewriting module: matplotlib._constrained_layout [assertion]
      early skip of rewriting module: matplotlib.legend [assertion]
      early skip of rewriting module: matplotlib.offsetbox [assertion]
      early skip of rewriting module: matplotlib.image [assertion]
      early skip of rewriting module: matplotlib._image [assertion]
      early skip of rewriting module: matplotlib.container [assertion]
      early skip of rewriting module: matplotlib.legend_handler [assertion]
      early skip of rewriting module: matplotlib.style [assertion]
      early skip of rewriting module: matplotlib.style.core [assertion]
      early skip of rewriting module: matplotlib.backend_bases [assertion]
      early skip of rewriting module: matplotlib.backend_tools [assertion]
      early skip of rewriting module: matplotlib.tight_bbox [assertion]
      early skip of rewriting module: matplotlib.widgets [assertion]
      early skip of rewriting module: PIL [assertion]
      early skip of rewriting module: PIL._version [assertion]
      early skip of rewriting module: PIL.Image [assertion]
      early skip of rewriting module: PIL.ImageMode [assertion]
      early skip of rewriting module: PIL.TiffTags [assertion]
      early skip of rewriting module: PIL._binary [assertion]
      early skip of rewriting module: PIL._util [assertion]
      early skip of rewriting module: PIL._imaging [assertion]
      early skip of rewriting module: cffi [assertion]
      early skip of rewriting module: cffi.api [assertion]
      early skip of rewriting module: cffi.lock [assertion]
      early skip of rewriting module: cffi.error [assertion]
      early skip of rewriting module: cffi.model [assertion]
      early skip of rewriting module: matplotlib.figure [assertion]
      early skip of rewriting module: matplotlib.axes [assertion]
      early skip of rewriting module: matplotlib.axes._subplots [assertion]
      early skip of rewriting module: matplotlib.axes._axes [assertion]
      early skip of rewriting module: matplotlib.category [assertion]
      early skip of rewriting module: matplotlib.units [assertion]
      early skip of rewriting module: matplotlib.dates [assertion]
      early skip of rewriting module: dateutil.rrule [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: matplotlib.mlab [assertion]
      early skip of rewriting module: matplotlib.quiver [assertion]
      early skip of rewriting module: matplotlib.stackplot [assertion]
      early skip of rewriting module: matplotlib.streamplot [assertion]
      early skip of rewriting module: matplotlib.table [assertion]
      early skip of rewriting module: matplotlib.tri [assertion]
      early skip of rewriting module: matplotlib.tri.triangulation [assertion]
      early skip of rewriting module: matplotlib._tri [assertion]
      early skip of rewriting module: matplotlib._qhull [assertion]
      early skip of rewriting module: matplotlib.tri.tricontour [assertion]
      early skip of rewriting module: matplotlib.tri.tritools [assertion]
      early skip of rewriting module: matplotlib.tri.trifinder [assertion]
      early skip of rewriting module: matplotlib.tri.triinterpolate [assertion]
      early skip of rewriting module: matplotlib.tri.trirefine [assertion]
      early skip of rewriting module: matplotlib.tri.tripcolor [assertion]
      early skip of rewriting module: matplotlib.tri.triplot [assertion]
      early skip of rewriting module: matplotlib.axes._base [assertion]
      early skip of rewriting module: matplotlib.axis [assertion]
      early skip of rewriting module: matplotlib.scale [assertion]
      early skip of rewriting module: matplotlib.spines [assertion]
      early skip of rewriting module: matplotlib.projections [assertion]
      early skip of rewriting module: matplotlib.projections.geo [assertion]
      early skip of rewriting module: matplotlib.projections.polar [assertion]
      early skip of rewriting module: matplotlib.backends [assertion]
      early skip of rewriting module: matplotlib.backends.backend_tkagg [assertion]
      early skip of rewriting module: matplotlib.backends.tkagg [assertion]
      early skip of rewriting module: tkinter [assertion]
      early skip of rewriting module: _tkinter [assertion]
      early skip of rewriting module: tkinter.constants [assertion]
      early skip of rewriting module: matplotlib.backends._tkagg [assertion]
      early skip of rewriting module: matplotlib.backends.backend_agg [assertion]
      early skip of rewriting module: matplotlib.backends._backend_agg [assertion]
      early skip of rewriting module: matplotlib.backends._backend_tk [assertion]
      early skip of rewriting module: matplotlib.backends.windowing [assertion]
      early skip of rewriting module: matplotlib.backend_managers [assertion]
      early skip of rewriting module: pyconmech.frame_analysis.visualization [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __name__
            obj: test_np_stiffness
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __spec__
            obj: ModuleSpec(name='test_np_stiffness', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>, origin='D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_np_stiffness.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __file__
            obj: D:\code_ws\pb_ws\conmech\tests\python\test_np_stiffness.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __cached__
            obj: D:\code_ws\pb_ws\conmech\tests\python\__pycache__\test_np_stiffness.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Copyright (c) 2019 Yijiang Huang, All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
, 'help': Type help() for interactive help, or help(object) for help about object., '__pybind11_internals_v3__': <capsule object NULL at 0x00000236882CA690>, '__pybind11_internals_v3_msvc__': <capsule object NULL at 0x000002368895ADB0>}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: pytest
            obj: <module 'pytest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: os
            obj: <module 'os' from 'd:\\miniconda\\envs\\pb_ws\\lib\\os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: cprint
            obj: <function cprint at 0x0000023689624438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: assert_array_almost_equal_nulp
            obj: <function assert_array_almost_equal_nulp at 0x000002368921FD38>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: assert_array_almost_equal
            obj: <function assert_array_almost_equal at 0x000002368921F5E8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: np
            obj: <module 'numpy' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\numpy\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: norm
            obj: <function norm at 0x00000236884C99D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: scipy
            obj: <module 'scipy' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\scipy\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: SPLA
            obj: <module 'scipy.sparse.linalg' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\scipy\\sparse\\linalg\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: csc_matrix
            obj: <class 'scipy.sparse.csc.csc_matrix'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: plt
            obj: <module 'matplotlib.pyplot' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\matplotlib\\pyplot.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: find
            obj: <function find at 0x00000236892B1438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: create_local_stiffness_matrix
            obj: <function create_local_stiffness_matrix at 0x0000023689624558>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: global2local_transf_matrix
            obj: <function global2local_transf_matrix at 0x00000236896245E8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: assemble_global_stiffness_matrix
            obj: <function assemble_global_stiffness_matrix at 0x0000023689624708>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: get_element_shape_fn
            obj: <function get_element_shape_fn at 0x000002368A505CA8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: get_internal_reaction_fn
            obj: <function get_internal_reaction_fn at 0x000002368A50B4C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: bending_stiffness_matrix
            obj: <function bending_stiffness_matrix at 0x00000236896244C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: axial_stiffness_matrix
            obj: <function axial_stiffness_matrix at 0x00000236882D1438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: turn_diagblock
            obj: <function turn_diagblock at 0x0000023689624678>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: mu2G
            obj: <function mu2G at 0x000002368961A9D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: G2mu
            obj: <function G2mu at 0x0000023689621F78>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: StiffnessChecker
            obj: <class 'pyconmech.frame_analysis.stiffness_checker.StiffnessChecker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: read_load_case_json
            obj: <function read_load_case_json at 0x000002368961EC18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: isPSD
            obj: <function isPSD at 0x00000236896A55E8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: isPD
            obj: <function isPD at 0x000002368A50B438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: assert_aleq_gmz_array
            obj: <function assert_aleq_gmz_array at 0x000002368A50B558>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: assert_aleq_sparse
            obj: <function assert_aleq_sparse at 0x000002368A50B5E8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: test_2Dbeam_stiffness_matrix_parsed
            obj: <function test_2Dbeam_stiffness_matrix_parsed at 0x000002368A50B678>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000023689680EC8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
          early skip of rewriting module: encodings.unicode_escape [assertion]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_2Dbeam_stiffness_matrix_parsed[numpy]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: test_2Dbeam_stiffness_matrix
            obj: <function test_2Dbeam_stiffness_matrix at 0x000002368A50B708>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A508EC8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_2Dbeam_stiffness_matrix>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: test_transf_matrix
            obj: <function test_transf_matrix at 0x000002368A50B798>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50A188>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_transf_matrix>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: test_rotational_stiffness
            obj: <function test_rotational_stiffness at 0x000002368A50B828>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50A388>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_rotational_stiffness>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: test_axial_stiffness
            obj: <function test_axial_stiffness at 0x000002368A50B8B8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50A608>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_axial_stiffness>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: test_joint_release_solve
            obj: <function test_joint_release_solve at 0x000002368A50B948>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50A808>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_joint_release_solve>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FF8F6468F20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_np_stiffness.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/python/test_np_stiffness.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_2Dbeam_stiffness_matrix_parsed[numpy]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_2Dbeam_stiffness_matrix_parsed[numpy]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_2Dbeam_stiffness_matrix> [collection]
      pytest_itemcollected [hook]
          item: <Function test_2Dbeam_stiffness_matrix>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_transf_matrix> [collection]
      pytest_itemcollected [hook]
          item: <Function test_transf_matrix>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_rotational_stiffness> [collection]
      pytest_itemcollected [hook]
          item: <Function test_rotational_stiffness>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_axial_stiffness> [collection]
      pytest_itemcollected [hook]
          item: <Function test_axial_stiffness>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_joint_release_solve> [collection]
      pytest_itemcollected [hook]
          item: <Function test_joint_release_solve>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/python/test_np_stiffness.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/python/test_parsing.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/python/test_parsing.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/python/test_parsing.py>
      find_module called for: test_parsing [assertion]
      matched test file 'D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_parsing.py' [assertion]
      found cached rewritten pyc for D:\code_ws\pb_ws\conmech\tests\python\test_parsing.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __name__
            obj: test_parsing
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __spec__
            obj: ModuleSpec(name='test_parsing', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>, origin='D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_parsing.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __file__
            obj: D:\code_ws\pb_ws\conmech\tests\python\test_parsing.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __cached__
            obj: D:\code_ws\pb_ws\conmech\tests\python\__pycache__\test_parsing.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Copyright (c) 2019 Yijiang Huang, All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
, 'help': Type help() for interactive help, or help(object) for help about object., '__pybind11_internals_v3__': <capsule object NULL at 0x00000236882CA690>, '__pybind11_internals_v3_msvc__': <capsule object NULL at 0x000002368895ADB0>}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: os
            obj: <module 'os' from 'd:\\miniconda\\envs\\pb_ws\\lib\\os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: np
            obj: <module 'numpy' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\numpy\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: assert_equal
            obj: <function assert_equal at 0x000002368921F288>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: assert_almost_equal
            obj: <function assert_almost_equal at 0x000002368921F3A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: pytest
            obj: <module 'pytest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: random
            obj: <module 'random' from 'd:\\miniconda\\envs\\pb_ws\\lib\\random.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: StiffnessChecker
            obj: <class 'pyconmech.frame_analysis.stiffness_checker.StiffnessChecker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: read_frame_json
            obj: <function read_frame_json at 0x000002368961E438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: write_frame_json
            obj: <function write_frame_json at 0x000002368961E828>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: read_load_case_json
            obj: <function read_load_case_json at 0x000002368961EC18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: check_material_dict
            obj: <function check_material_dict at 0x000002368961AF78>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: deepcopy
            obj: <function deepcopy at 0x000002368725A438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: test_frame_file_io
            obj: <function test_frame_file_io at 0x000002368A5281F8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50CD08>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_frame_file_io>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: test_parse_material_properties_from_frame_json
            obj: <function test_parse_material_properties_from_frame_json at 0x000002368A528318>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50E548>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_material_properties_from_frame_json[numpy]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: test_parse_element_from_json
            obj: <function test_parse_element_from_json at 0x000002368A5283A8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A50E788>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_element_from_json[numpy]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FF8F6468F20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_parsing.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/python/test_parsing.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_frame_file_io> [collection]
      pytest_itemcollected [hook]
          item: <Function test_frame_file_io>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_material_properties_from_frame_json[numpy]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_material_properties_from_frame_json[numpy]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_element_from_json[numpy]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_element_from_json[numpy]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/python/test_parsing.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/python/test_stiffness_checker.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/python/test_stiffness_checker.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/python/test_stiffness_checker.py>
      find_module called for: test_stiffness_checker [assertion]
      matched test file 'D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_stiffness_checker.py' [assertion]
      _read_pyc(D:\code_ws\pb_ws\conmech\tests\python\test_stiffness_checker.py): invalid or out of date pyc [assertion]
      rewriting WindowsPath('D:/code_ws/pb_ws/conmech/tests/python/test_stiffness_checker.py') [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __name__
            obj: test_stiffness_checker
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __spec__
            obj: ModuleSpec(name='test_stiffness_checker', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000023687848388>, origin='D:\\code_ws\\pb_ws\\conmech\\tests\\python\\test_stiffness_checker.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __file__
            obj: D:\code_ws\pb_ws\conmech\tests\python\test_stiffness_checker.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __cached__
            obj: D:\code_ws\pb_ws\conmech\tests\python\__pycache__\test_stiffness_checker.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Copyright (c) 2019 Yijiang Huang, All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
, 'help': Type help() for interactive help, or help(object) for help about object., '__pybind11_internals_v3__': <capsule object NULL at 0x00000236882CA690>, '__pybind11_internals_v3_msvc__': <capsule object NULL at 0x000002368895ADB0>}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: print_function
            obj: _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: os
            obj: <module 'os' from 'd:\\miniconda\\envs\\pb_ws\\lib\\os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: pytest
            obj: <module 'pytest' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: cprint
            obj: <function cprint at 0x0000023689624438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: np
            obj: <module 'numpy' from 'd:\\miniconda\\envs\\pb_ws\\lib\\site-packages\\numpy\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: norm
            obj: <function norm at 0x00000236884C99D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: multi_dot
            obj: <function multi_dot at 0x00000236884C9C18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: random
            obj: <module 'random' from 'd:\\miniconda\\envs\\pb_ws\\lib\\random.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: copy
            obj: <function copy at 0x0000023687252948>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: time
            obj: <module 'time' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: assert_equal
            obj: <function assert_equal at 0x000002368921F288>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: assert_almost_equal
            obj: <function assert_almost_equal at 0x000002368921F3A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: StiffnessChecker
            obj: <class 'pyconmech.frame_analysis.stiffness_checker.StiffnessChecker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: read_frame_json
            obj: <function read_frame_json at 0x000002368961E438>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: read_load_case_json
            obj: <function read_load_case_json at 0x000002368961EC18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: check_material_dict
            obj: <function check_material_dict at 0x000002368961AF78>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: PointLoad
            obj: <class 'pyconmech.frame_analysis.io_base.PointLoad'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: GravityLoad
            obj: <class 'pyconmech.frame_analysis.io_base.GravityLoad'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: repetitive_test_stiffness_checker
            obj: <function repetitive_test_stiffness_checker at 0x000002368A528D38>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_stiffness_checker_solve_consistency
            obj: <function test_stiffness_checker_solve_consistency at 0x000002368A528A68>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A67E648>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight+point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight+point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight+point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight+point_load]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_get_nodal_loads
            obj: <function test_get_nodal_loads at 0x000002368A5285E8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A679948>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_nodal_loads[numpy]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_neighnor_query
            obj: <function test_neighnor_query at 0x000002368A528678>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A679048>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_neighnor_query[numpy]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: repetitive_test_equilibrium
            obj: <function repetitive_test_equilibrium at 0x000002368A528708>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_nodal_equilibrium
            obj: <function test_nodal_equilibrium at 0x000002368A68B318>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A676D08>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight+point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: self_weight+point_load
                argname: load_case
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_nodal_equilibrium[numpy-tower-self_weight]>, <Function test_nodal_equilibrium[numpy-tower-point_load]>, <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>, <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: repetitive_check_gravity_validity
            obj: <function repetitive_check_gravity_validity at 0x000002368A68B3A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_self_weight_validity
            obj: <function test_self_weight_validity at 0x000002368A68B438>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A67C048>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_self_weight_validity[numpy-tower]>, <Function test_self_weight_validity[numpy-topopt-100]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_uniformly_distributed_load_with_gravity
            obj: <function test_uniformly_distributed_load_with_gravity at 0x000002368A68B4C8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A67AE08>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: []
                argname: existing_e_ids
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: tower
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: [0, 1, 2, 3, 4, 5, 6, 7]
                argname: existing_e_ids
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: []
                argname: existing_e_ids
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: topopt-100
                argname: test_case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: [0, 1, 2, 3, 4, 5, 8, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 51, 52, 53, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131]
                argname: existing_e_ids
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids0]>, <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids1]>, <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids2]>, <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids3]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: test_uniformly_distributed_load_with_analytical_solution
            obj: <function test_uniformly_distributed_load_with_analytical_solution at 0x000002368A68B558>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002368A63D6C8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x0000023687DDEB08>
                val: numpy
                argname: engine
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_uniformly_distributed_load_with_analytical_solution[numpy]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FF8F6468F20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/python/test_stiffness_checker.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/python/test_stiffness_checker.py' lenresult=21 outcome='passed'> [hook]
    genitems <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stiffness_checker_solve_consistency[numpy-tower-point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stiffness_checker_solve_consistency[numpy-tower-point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight+point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight+point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight+point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight+point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_nodal_loads[numpy]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_nodal_loads[numpy]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_neighnor_query[numpy]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_neighnor_query[numpy]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nodal_equilibrium[numpy-tower-self_weight]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nodal_equilibrium[numpy-tower-point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nodal_equilibrium[numpy-topopt-100-point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_self_weight_validity[numpy-tower]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_self_weight_validity[numpy-tower]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_self_weight_validity[numpy-topopt-100]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_self_weight_validity[numpy-topopt-100]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids2]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids2]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids3]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids3]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uniformly_distributed_load_with_analytical_solution[numpy]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uniformly_distributed_load_with_analytical_solution[numpy]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/python/test_stiffness_checker.py' lenresult=21 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x0000023687DDEB08>
          items: [<Function test_subdivided_compliance>, <Function test_2Dbeam_stiffness_matrix_parsed[numpy]>, <Function test_2Dbeam_stiffness_matrix>, <Function test_transf_matrix>, <Function test_rotational_stiffness>, <Function test_axial_stiffness>, <Function test_joint_release_solve>, <Function test_frame_file_io>, <Function test_parse_material_properties_from_frame_json[numpy]>, <Function test_parse_element_from_json[numpy]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight+point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight+point_load]>, <Function test_get_nodal_loads[numpy]>, <Function test_neighnor_query[numpy]>, <Function test_nodal_equilibrium[numpy-tower-self_weight]>, <Function test_nodal_equilibrium[numpy-tower-point_load]>, <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>, <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>, <Function test_self_weight_validity[numpy-tower]>, <Function test_self_weight_validity[numpy-topopt-100]>, <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids0]>, <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids1]>, <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids2]>, <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids3]>, <Function test_uniformly_distributed_load_with_analytical_solution[numpy]>]
        pytest_deselected [hook]
            items: [<Function test_subdivided_compliance>, <Function test_2Dbeam_stiffness_matrix_parsed[numpy]>, <Function test_2Dbeam_stiffness_matrix>, <Function test_transf_matrix>, <Function test_rotational_stiffness>, <Function test_axial_stiffness>, <Function test_joint_release_solve>, <Function test_frame_file_io>, <Function test_parse_material_properties_from_frame_json[numpy]>, <Function test_parse_element_from_json[numpy]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-tower-self_weight+point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-point_load]>, <Function test_stiffness_checker_solve_consistency[numpy-topopt-100-self_weight+point_load]>, <Function test_get_nodal_loads[numpy]>, <Function test_neighnor_query[numpy]>, <Function test_self_weight_validity[numpy-tower]>, <Function test_self_weight_validity[numpy-topopt-100]>, <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids0]>, <Function test_uniformly_distributed_load_with_gravity[numpy-tower-existing_e_ids1]>, <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids2]>, <Function test_uniformly_distributed_load_with_gravity[numpy-topopt-100-existing_e_ids3]>, <Function test_uniformly_distributed_load_with_analytical_solution[numpy]>]
        finish pytest_deselected --> [] [hook]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x0000023687DDEB08>
            startdir: D:\code_ws\pb_ws\conmech
            items: [<Function test_nodal_equilibrium[numpy-tower-self_weight]>, <Function test_nodal_equilibrium[numpy-tower-point_load]>, <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>, <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function test_nodal_equilibrium[numpy-tower-self_weight]>, <Function test_nodal_equilibrium[numpy-tower-point_load]>, <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>, <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>, <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>] [hook]
    pytest_runtestloop [hook]
        session: <Session conmech exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=6>
      pytest_runtest_protocol [hook]
          item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
          nextitem: <Function test_nodal_equilibrium[numpy-tower-point_load]>
        pytest_runtest_logstart [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-tower-self_weight]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_setup --> tower [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_setup --> self_weight [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_setup --> numpy [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_setup --> True [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
            nextitem: <Function test_nodal_equilibrium[numpy-tower-point_load]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-tower-self_weight]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
          nextitem: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
        pytest_runtest_logstart [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-tower-point_load]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_setup --> tower [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_setup --> point_load [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_setup --> numpy [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_setup --> True [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nodal_equilibrium[numpy-tower-point_load]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
            nextitem: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-tower-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-point_load]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-tower-point_load]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
          nextitem: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
        pytest_runtest_logstart [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-tower-self_weight+point_load]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_setup --> tower [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_setup --> self_weight+point_load [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_setup --> numpy [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_setup --> True [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
            nextitem: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-tower-self_weight+point_load]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-tower-self_weight+point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-tower-self_weight+point_load]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
          nextitem: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
        pytest_runtest_logstart [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-topopt-100-self_weight]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_setup --> topopt-100 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_setup --> self_weight [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_setup --> numpy [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_setup --> True [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
            nextitem: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-topopt-100-self_weight]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
          nextitem: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
        pytest_runtest_logstart [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-topopt-100-point_load]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_setup --> topopt-100 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_setup --> point_load [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_setup --> numpy [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_setup --> True [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
            nextitem: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-point_load]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-topopt-100-point_load]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_setup --> topopt-100 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_setup --> self_weight+point_load [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_setup --> numpy [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_setup --> True [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='debug' scope='function' baseid='tests'>
              request: <SubRequest 'debug' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine' scope='function' baseid=''>
              request: <SubRequest 'engine' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='load_case' scope='function' baseid=''>
              request: <SubRequest 'load_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_case' scope='function' baseid=''>
              request: <SubRequest 'test_case' for <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000023687DDEB08>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/python/test_stiffness_checker.py::test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]
            location: ('tests\\python\\test_stiffness_checker.py', 364, 'test_nodal_equilibrium[numpy-topopt-100-self_weight+point_load]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session conmech exitstatus=0 testsfailed=0 testscollected=6>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x0000023688279288>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x0000023687DDEB08>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x0000023687DDEB08>
    finish pytest_unconfigure --> [] [hook]
